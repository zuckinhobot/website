{"version":3,"sources":["img/logo.png","components/Authors.js","components/Navbar.js","App.js","serviceWorker.js","index.js","img/authors/cantarino.jpeg","img/authors/gabriel.jpeg","img/authors/rubio.jpeg"],"names":["module","exports","authorList","name","email","avatar","cantarinoImg","gabrielImg","rubioImg","Authors","itemLayout","dataSource","renderItem","author","Item","Meta","src","title","description","Navbar","span","className","logo","width","height","offset","Text","Typography","App","code","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yHAAAA,EAAOC,QAAU,IAA0B,kC,qRCMrCC,EAAa,CACjB,CACEC,KAAM,sBACNC,MAAO,gCACPC,OAAQC,KAEV,CAAEH,KAAM,gBAAiBC,MAAO,gBAAiBC,OAAQE,KACzD,CAAEJ,KAAM,eAAgBC,MAAO,yBAA0BC,OAAQG,MAGpD,SAASC,IACtB,OACE,kBAAC,IAAD,CACEC,WAAW,aACXC,WAAYT,EACZU,WAAY,SAACC,GAAD,OACV,kBAAC,IAAKC,KAAN,KACE,kBAAC,IAAKA,KAAKC,KAAX,CACEV,OAAQ,kBAAC,IAAD,CAAQW,IAAKH,EAAOR,SAC5BY,MAAOJ,EAAOV,KACde,YAAaL,EAAOT,Y,+CCrBjB,SAASe,IACtB,OACE,gCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,KAAM,GACT,yBAAKC,UAAU,eACb,yBAAKL,IAAKM,IAAMC,MAAM,KAAKC,OAAO,OAClC,0BAAMH,UAAU,eAAhB,iBAGJ,kBAAC,IAAD,CAAKD,KAAM,EAAGK,OAAQ,M,kBCRtBC,EAASC,IAATD,KAgEOE,MA9Df,WACE,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,MACA,8BACE,yBAAKA,UAAU,WACb,iDACA,kGAGA,uDACA,gEACA,sHAIA,kBAACK,EAAD,CAAMG,MAAI,GAAV,+HAIA,kBAAC,IAAD,MACA,2DACA,2NAKA,kBAACH,EAAD,CAAMG,MAAI,GAAV,wCAEE,6BAFF,WAGU,6BAHV,uBAMA,kBAACH,EAAD,CAAMG,MAAI,GAAV,4BAEE,6BAFF,qDAKA,6BACA,yDACA,sRAMA,yVAOA,kBAAC,IAAD,MACA,0CACA,kBAACpB,EAAD,UCpDUqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BjD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.67e52860.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.67c8bfe5.png\";","import React from \"react\";\nimport { Avatar, List } from \"antd\";\nimport cantarinoImg from \"../img/authors/cantarino.jpeg\";\nimport gabrielImg from \"../img/authors/gabriel.jpeg\";\nimport rubioImg from \"../img/authors/rubio.jpeg\";\n\nconst authorList = [\n  {\n    name: \"Christian Cantarino\",\n    email: \"christian.cantarino@gmail.com\",\n    avatar: cantarinoImg,\n  },\n  { name: \"Gabriel Dutra\", email: \"me@gdutra.dev\", avatar: gabrielImg },\n  { name: \"Rubio Torres\", email: \"rubiotorres@cefetmg.br\", avatar: rubioImg },\n];\n\nexport default function Authors() {\n  return (\n    <List\n      itemLayout=\"horizontal\"\n      dataSource={authorList}\n      renderItem={(author) => (\n        <List.Item>\n          <List.Item.Meta\n            avatar={<Avatar src={author.avatar} />}\n            title={author.name}\n            description={author.email}\n          />\n        </List.Item>\n      )}\n    />\n  );\n}\n","import React from \"react\";\nimport { Row, Col } from \"antd\";\nimport logo from \"../img/logo.png\";\nimport \"./Navbar.css\";\n\nexport default function Navbar() {\n  return (\n    <header>\n      <Row>\n        <Col span={8}>\n          <div className=\"navbar-logo\">\n            <img src={logo} width=\"32\" height=\"32\" />\n            <span className=\"navbar-text\">Zuckinhobot</span>\n          </div>\n        </Col>\n        <Col span={8} offset={8}>\n          {/* authors here */}\n        </Col>\n      </Row>\n    </header>\n  );\n}\n","import React from \"react\";\nimport { Typography, Divider } from \"antd\";\nimport Authors from \"./components/Authors\";\nimport Navbar from \"./components/Navbar\";\nimport \"./App.css\";\nimport \"antd/dist/antd.css\";\n\nconst { Text } = Typography;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <main>\n        <div className=\"content\">\n          <h1>About Zuckinhobot</h1>\n          <p>\n            Learn about Zuckinhobot, the web crawler made by CEFET/MG students.\n          </p>\n          <h2>Identifying Zuckinhobot</h2>\n          <h3>Verifying Zuckinhobot user agent</h3>\n          <p>\n            The user-agent string contains \"Zuckinhobot\" and other information.\n            This is the format:\n          </p>\n          <Text code>\n            Mozilla/5.0 (Device; OS_version) Zuckinhobot (KHTML, like Gecko)\n            Version/Safari_version Safari/WebKit_version (Zuckinhobot)\n          </Text>\n          <Divider />\n          <h2>Customizing robot.txt rules</h2>\n          <p>\n            Zuckinhobot respects standard robots.txt directives that are\n            targeted at Zuckinhobot. In this example, Zuckinhobot doesn't try to\n            crawl documents that are under /private/ or /not-allowed/:\n          </p>\n          <Text code>\n            User-agent: Zuckinhobot # Zuckinhobot\n            <br />\n            Allow: /<br />\n            Disallow: /private/\n          </Text>\n          <Text code>\n            User-agent: * # any robot\n            <br />\n            Disallow: /not-allowed/ # disallow this directory\n          </Text>\n          <br />\n          <h3>Rendering and robot rules</h3>\n          <p>\n            Zuckinhobot may render the content of your website within a browser.\n            If javascript, CSS, and other resources are blocked via robots.txt,\n            it may not be able to render the content properly. This includes\n            XHR, JS, and CSS that the page might require.\n          </p>\n          <p>\n            In order for Zuckinhobot to index the best content for the page,\n            make sure that everything needed for a user to render the page is\n            available to Zuckinhobot. Alternatively, make sure that the website\n            renders cleanly, even if all of the resources are not available.\n            This is often referred to as graceful degradation.\n          </p>\n          <Divider />\n          <h2>Contact us</h2>\n          <Authors />\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/cantarino.c60f3e72.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/gabriel.965daf88.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/rubio.0ea11122.jpeg\";"],"sourceRoot":""}